// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Space {
  id                 Int       @id @default(autoincrement())
  name               String
  agencyId           String
  agency             Agency    @relation(fields: [agencyId], references: [userId], onDelete: Cascade)
  address            Address?
  description        String
  seats              Int
  isFullSpaceBooking Boolean // True if the space must be booked entirely
  typology           Typology
  services           Service[]
  price              Decimal
  bookings           Booking[]
  images             Json?
  reviews            Review[]
  avgRating          Decimal?  @default(0)
}

model Address {
  id        Int     @id @default(autoincrement())
  street    String
  number    String?
  city      String
  zip       String
  country   String
  latitude  Float
  longitude Float
  spaceId   Int     @unique
  space     Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Service {
  id       Int     @id @default(autoincrement())
  detail   String  @unique
  spaces   Space[]
  iconName String?
}

enum Typology {
  MEETING_ROOMS
  PRIVATE_OFFICES
  COMMON_AREAS
  OUTDOOR_SPACES
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  role          Role
  password      String? // Hashed password for traditional authentication
  oauthProvider OAuthProvider
  oauthId       String?
  createdAt     DateTime      @default(now())
  client        Client?
  agency        Agency?
  accounts      Account[]
  sessions      Session[]
}

model Client {
  userId    String    @id
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  surname   String
  cellphone String
  bookings  Booking[]
  reviews   Review[]
}

model Agency {
  userId    String    @id
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  vatNumber String
  telephone String
  spaces    Space[]
}

model Booking {
  id          Int      @id @default(autoincrement())
  clientId    String
  client      Client   @relation(fields: [clientId], references: [userId])
  spaceId     Int
  space       Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  bookingDate DateTime // Booking date
  createdAt   DateTime @default(now())

  @@unique([clientId, spaceId, bookingDate])
}

model Review {
  id        Int      @id @default(autoincrement())
  clientId  String
  client    Client   @relation(fields: [clientId], references: [userId])
  spaceId   Int
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  rating    Int // 1-5
  comment   String
  createdAt DateTime @default(now())

  @@unique([clientId, spaceId])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  CLIENT
  AGENCY
}

enum OAuthProvider {
  GOOGLE
  GITHUB
  APP
  // other
}
