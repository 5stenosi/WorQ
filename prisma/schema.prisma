// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// TODO: Capire come implementare le prenotazioni
model Space {
  id Int @id @default(autoincrement())
  name String
  agencyId Int
  agency Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  address Address?
  description String
  seats Int // Private Office = 1, Meeting Room = 10, Study Room = 10... 
  numberOfSpaces Int // Posso avere pi√π spazi di uguale tipologia
  isFullSpaceBooking  Boolean // True se lo spazio deve essere prenotato interamente
  typology Typology
  services Service[] 
  price Decimal
  bookings Booking[]
  images Json?
  reviews Review[]
  avgRating Decimal? @default(0)
}

model Address {
  id Int @id @default(autoincrement())
  street String
  number String
  city String
  zip String
  country String
  latitude Float
  longitude Float
  spaceId Int @unique
  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Service {
  id Int @id @default(autoincrement())
  detail String
  spaces Space[]
}

enum Typology {
  MEETING_ROOMS
  PRIVATE_OFFICES
  STUDY_ROOMS
  OUTDOOR_SPACES
}

model User {
  id String @id @default(uuid())
  email String @unique
  role Role
  oauthProvider OAuthProvider
  oauthId String
  createdAt DateTime @default(now())
  client Client?
  agency Agency?
}

model Client {
  id Int @id @default(autoincrement())
  name String
  surname String
  cellphone String
  bookings Booking[]
  reviews Review[]
  userEmail String @unique
  user User @relation(fields: [userEmail], references: [email])
}

model Agency {
  id Int @id @default(autoincrement())
  name String
  vatNumber String
  telephone String
  spaces Space[]
  userEmail String @unique
  user User @relation(fields: [userEmail], references: [email])
}

model Booking {
  id Int @id @default(autoincrement())
  clientId Int
  client Client @relation(fields: [clientId], references: [id])
  spaceId Int
  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  bookingDate DateTime // Data della prenotazione
  seatsBooked Int // Numero di posti prenotati
  createdAt DateTime @default(now())
}

model Review {
  id Int @id @default(autoincrement())
  clientId Int
  client Client @relation(fields: [clientId], references: [id])
  spaceId Int
  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  rating Int // 1-5
  comment String
  createdAt DateTime @default(now())
  @@unique([clientId, spaceId])
}

enum Role {
  CLIENT
  AGENCY
}

enum OAuthProvider {
  GOOGLE
  FACEBOOK
  APPLE
  // other
}